import pandas as pd
import numpy as np
import logging
from datetime import datetime, timedelta

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def simulate_logs(n=100):
    """Simulate structured logs with timestamps and response times."""
    start_time = datetime(2025, 6, 7, 10, 0)
    logs = []
    for i in range(n):
        timestamp = start_time + timedelta(minutes=i)
        
        response_time = np.random.normal(0.5, 0.1) if np.random.random() > 0.1 else np.random.normal(3.0, 0.3)
        logs.append({"timestamp": timestamp, "response_time": response_time})
    return logs

def analyze_logs(log_data_list):
    df = pd.DataFrame(log_data_list)
    df['timestamp'] = pd.to_datetime(df['timestamp'])
    df = df.set_index('timestamp')

    df['rolling_avg'] = df['response_time'].rolling('3min').mean()
    df['rolling_std'] = df['response_time'].rolling('3min').std()

    df['threshold'] = df['rolling_avg'] + 2 * df['rolling_std']
    df['threshold'] = df['threshold'].fillna(df['response_time'].mean() + 2 * df['response_time'].std())

    df['is_anomaly'] = df['response_time'] > df['threshold']
    anomalies = df[df['is_anomaly']]

    print("Sample Data (first 5 rows):\n", df[['response_time', 'rolling_avg', 'rolling_std', 'threshold']].head())

    for index, row in anomalies.iterrows():
        logger.warning(f"Anomaly detected at {index}: response_time={row['response_time']:.2f}s "
                       f"(threshold={row['threshold']:.2f}s)")

    print(f"Found {len(anomalies)} anomalies.")
    return anomalies

if __name__ == "__main__":
    log_data = simulate_logs(100)
    anomalies = analyze_logs(log_data)
    print("Anomalies:\n", anomalies[['response_time', 'rolling_avg', 'rolling_std', 'threshold']])

import random, time, logging
from tenacity import retry, stop_after_attempt,wait_exponential,retry_if_exception_type,before_sleep_log

logging.basicConfig(level=logging.INFO, format='%(asctime)s -%(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

@retry(
    stop=stop_after_attempt(3),
    wait=wait_exponential(multiplier=1 , min=1, max=10),
    retry=retry_if_exception_type(ConnectionError),
    before_sleep=before_sleep_log(logger,logging.INFO)
)


def call_flaky_service():
    """ Simulates a service that fails sometimes. """
    if random.random() < 0.3:
        logging.error("Flaky service failed!")
        raise ConnectionError("Database unavailable")
    logging.info("Flaky service succeeded!")
    return {"data": "success"}

def process_request():
    try:
        # PROBLEM: Fails immediately if call_flaky_service fails. No retries!
        result = call_flaky_service()
        return {"status": "OK", "result": result}
    except ConnectionError as e:
        return {"status": "ERROR", "message": str(e)}

print(process_request())
